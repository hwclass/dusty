{"version":3,"file":"dusty-1.3.2.js","sources":["../src/main.js"],"sourcesContent":["const subModuleA = require('sub-module-a');\nconst subModuleB = require('sub-module-b');\n\nmodule.exports = {\n\tsubModuleA: subModuleA,\n\tsubModuleB: subModuleB\t\n}\n\n/*!\n * dusty : A small library-like DOM traversing tool\n *\n * Copyright (c) 2014 Barış Güler\n * http://hwclass.github.io\n *\n * Licensed under MIT\n * http://www.opensource.org/licenses/mit-license.php\n *\n * Launch  : October 2014\n * Version : 1.3.2\n * Released: 2015\n *\n */\n\n'use strict';\n\n;const dusty = ((global, document, undefined) => {\n\n  const config = {\n    messages : {\n      selectorCriteriaError : 'There is no any element specified.',\n      noMarkupCode : 'There is no any markup code specified.'\n    }\n  };\n\n  const subModules = {\n  \tsubModuleA: subModuleA,\n  \tsubModuleB: subModuleB\n  }\n\n  const add = {\n\n    /**\n     * event() : The method for binding events for selected element(s)\n     *\n     * @param {object} element\n     * @param {string} event\n     * @param {function} fn\n    */\n    event: eventModule,\n\n    /**\n     * customEvent() : The method for binding custom events for selected element(s)\n     *\n     * @param {object} element\n     * @param {string} customEventName\n    */\n    customEvent: (element, customEventName) => {\n      element.dispatchEvent(new CustomEvent(customEventName));\n    },\n\n    /**\n     * element() : The method for appending a HTML code into an existing element in the DOM.\n     *\n     * @param {object} element\n     * @param {string} markup\n    */\n    element: (element, markup) => {\n      let result = false,\n          selectorCriteria = null;\n      if (dusty.utils.isUndefined(markup) || dusty.utils.isNull(markup)) {\n        result = dusty.config.messages.selectorCriteriaError;\n      } else {\n        if (!dusty.utils.isUndefined(dusty.get.byId(element)) && !dusty.utils.isNull(dusty.get.byId(element))) {\n          element = dusty.get.byId(elHTMLement);\n        } else if (!dusty.utils.isUndefined(dusty.get.byClass(element)) && !dusty.utils.isNull(dusty.get.byClass(element))) {\n          element = dusty.get.byClass(element);\n        } else {\n          result = dusty.config.messages.selectorCriteriaError;\n        }\n      }\n      element.innerHTML += markup;\n      return (dusty.utils.isUndefined(result) || dusty.utils.isNull(result) ? console.log(result) : undefined);\n    },\n\n    /**\n     * class() : The method for appending a class for the DOM nodes.\n     *\n     * @param {HTMLElement} nodes\n     * @param {string} className\n    */\n    class: (nodes, className) => {\n      for (var counterForNodes = 0, len = nodes.length; counterForNodes < len; counterForNodes++) {\n        let tempElement = nodes[counterForNodes];\n        if (!has.class(tempElement), className) {\n          nodes[counterForNodes].className += ' ' + className;\n        }\n      }\n    }\n\n  };\n\n  const remove = {\n\n    /**\n     * byId() : The method removes a DOM element specified id as an argument.\n     *\n     * @param {string} id\n    */\n    byId: (id) => {\n      return element.parentNode.removeChild(document.getElementById(id));\n    },\n\n    /**\n     * byId() : The method removes a DOM element specified class as an argument.\n     *\n     * @param {HTMLElement} nodes\n     * @param {string} className\n    */\n    byClass: (nodes, className) => {\n      return document.getElementsByClassName(className).remove();\n    },\n\n    /**\n     * withTagName() : The method removes a DOM element specified tag names as an argument.\n     *\n     * @param {string} tagName\n    */\n    withTagName: (tagName) => {\n      return document.getElementsByTagName(tagName).remove();\n    },\n\n    /**\n     * all() : The method removes the whole DOM element's content given in an array\n     *\n     * @param {HTMLElement} nodes\n    */\n    all: (nodes) => {\n      for (let counterForNodes = 0, len = nodes.length; counterForNodes < len; counterForNodes++) {\n        if (nodes[counterForNodes]) {\n          nodes[counterForNodes].parentNode.removeChild(nodes[counterForNodes]);\n        }\n      }\n    }\n\n  };\n\n  const ajax = {\n\n    /**\n     * request() : The method removes the whole DOM element's content given in an array\n     *\n     * @param {string} method\n     * @param {string} url\n     * @param {object} data\n     * @param {function} callback\n    */\n    request: (method, url, data, callback) => {\n      let xhrReq,\n          returnedData = null,\n          postData = null,\n          transferComplete = () => {\n            return true;\n          };\n      if (window.XMLHttpRequest) {\n        xhrReq = new XMLHttpRequest();\n      } else {\n        xhrReq = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n      xhrReq.addEventListener(\"load\", transferComplete, false);\n      xhrReq.onreadystatechange = () => {\n        if (xhrReq.readyState == 4 && xhrReq.status == 200) {\n          callback(xhrReq.responseText);\n        }\n      }\n      xhrReq.open(method, url, true);\n      if (method === 'POST') {\n        postData = data\n      }\n      xhrReq.send(postData);\n    }\n\n  };\n\n  const get = {\n\n    /**\n     * byId() : The method fetches a DOM element specified id as an argument.\n     *\n     * @param {string} id\n    */\n    byId: (id) => {\n      return document.getElementById(id);\n    },\n\n    /**\n     * byId() : The method gets a DOM element specified class as an argument.\n     *\n     * @param {HTMLElement} nodes\n     * @param {string} className\n    */\n    byClass: (className) => {\n      let elements = document.getElementsByClassName(className);\n      return (elements.length===0?undefined:elements);\n    },\n\n    /**\n     * withTagName() : The method gets a DOM element specified tag names as an argument.\n     *\n     * @param {string} tagName\n    */\n    withTagName: (tagName) => {\n      var elements = document.getElementsByTagName(tagName);\n      return (elements.length===0?undefined:elements);\n    }\n\n  };\n\n  var set = {\n\n    /**\n     * value() : The method sets the value of the specified DOM element.\n     *\n     * @param {HTMLElement} element\n     * @param {string} val\n    */\n    value: (element, val) => {\n      if(element.tagName && element.tagName.toLowerCase() === \"textarea\" || element.tagName.toLowerCase() === \"input\") {\n        element.value = val;\n      } else {\n        element.innerHTML = val;\n      }\n    },\n\n    /**\n     * HTML() : The method sets the HTML value of the specified DOM element.\n     *\n     * @param {HTMLElement} element\n     * @param {string} markup\n    */\n    HTML: (element, markup) => {\n      let el = element,\n          result = false;\n      if (typeof el !== \"undefined\" && el !== null) {\n        if (!dusty.utils.isUndefined(el) && !dusty.utils.isNull(el)) {\n          el.innerHTML = markup;\n        }\n      } else {\n        result = dusty.config.messages.selectorCriteriaError;\n      }\n      return (dusty.utils.isUndefined(result) || dusty.utils.isNull(result) ? console.log(result) : undefined);\n    },\n\n    /**\n     * attr() : The method sets the HTML attribute of the specified DOM element.\n     *\n     * @param {string} id\n     * @param {string} attribute\n     * @param {string} value\n    */\n    attr: function (id, attribute, value) {\n      document.getElementById(id).setAttribute(attribute, value);\n    }\n\n  };\n\n  const has = {\n\n    /**\n     * class() : The method checks if the HTML element has the specified class name or not.\n     *\n     * @param {HTMLElement} node\n     * @param {string} className\n    */\n    class: (node, className) => {\n      return (\" \" + node.className.split(/\\s+/g).join(\" \") + \" \").indexOf(\" \" + className + \" \") > -1;\n    }\n\n  };\n\n  const utils = {\n    \n    /**\n     * isUndefined() : The method checks if specified obj is undefined or not.\n     *\n     * @param {object} obj\n    */\n    isUndefined : (obj) => {\n      return (typeof obj === 'undefined');\n    },\n\n    /**\n     * isNull() : The method checks if specified obj is null or not.\n     *\n     * @param {object} obj\n    */\n    isNull: (obj) => {\n      return obj === null;\n    },\n\n    /**\n     * isEmptyString() : The method checks if specified arguement is an empty string or not.\n     *\n     * @param {object} obj\n    */\n    isEmptyString: (obj) => {\n      return (obj === '');\n    }\n    \n  };\n\n  return {\n    config : config,\n    get : get,\n    set : set,\n    add : add,\n    remove : remove,\n    ajax : ajax,\n    utils : utils\n  };\n\n})(window, document);\n\nmodule.exports = (dusty || {});\n"],"names":[],"mappings":"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"}